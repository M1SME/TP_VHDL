library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use ieee.numeric_std;
use ieee.std_logic_unsigned.all;


entity GestionVerin is
    port 
    (
         clk                         :     in  std_logic;
         reset_n                     :     in std_logic ;
         Write_n                      :     in std_logic;
			Data_IN                      :     in std_logic;
			out_PWM 							  :     out std_logic;
			clk_adc							  :     out std_logic;
			out_sens							  :     out std_logic;
			cs_n								  :     out std_logic;
			
			chipselect 						  :     in std_logic
			readdata  						  :     out std_logic_vector (31 downto 0);
			writedata                   : in std_logic_vector (31 downto 0);
			address                     : std_logic_vector (2 downto 0)
			
			
         
    );
end entity GestionVerin;



architecture rtl of GestionVerin is

-- Signaux AVALON  -- 

signal freq  : std_logic_vector (15 downto 0);
signal duty  : std_logic_vector (15 downto 0);
signal butee_g  : std_logic_vector (15 downto 0);
signal butee_d  : std_logic_vector (15 downto 0);
signal config  : std_logic_vector (4 downto 0);
signal Angle_barre  : std_logic_vector (11 downto 0);

-- Signaux internes -- 
signal raz_n      			       : std_logic;  
signal enable_pwm      			    : std_logic;  
signal sens_rotation					 : std_logic;
signal fin_course_d					 : std_logic;
signal fin_course_g      			 : std_logic;  





Begin 






  -- ECRITURE SUR LE BUS AVALON  --- 
process_write: process (clk, reset_n )
	begin
		if reset_n  = '0' then
			raz_n <= '0';
			start_stop <= '1';
			synchro <= (others => '0');
			unite <= (others => '0');
			centaine <= (others => '0');
			dizaine <= (others => '0');
		elsif clk'event and clk = '1' then
		if chipselect ='1' and write_n = '0' then
		if address = "000" then
		  
			 freq  <= writedata(15 downto 0);
		end if;
		if address = "001" then
			duty <= writedata(15 downto 0);
		end if;
		if address = "010" then
			butee_g <= writedata(15 downto 0);
		end if;
		if address = "011" then
			butee_d <= writedata(15 downto 0);
		end if;
		if address = "100" then
			raz_n <= writedata(0);
			enable_pwm <= writedata(1);
			sens_rotation <= writedata(2);
			fin_course_d <= writedata(3);
			fin_course_g <= writedata(4);
		end if;
	end if;
end if;
end process process_write;
-- FIN ECRITURE SUR LE BUS AVALON  --- 




--  LECTURE SUR LE BUS AVALON  --- 
process_Read: PROCESS(address)
	BEGIN
		case address is
			when "000" => readdata <= X"0000000" & "0" & fin_transmit &start_stop  & raz_n  ;
			when "001" => readdata <= X"000000" &  TRAME(7 downto 0)  ;
			when "010" => readdata <= X"000000" &  TRAME(15 downto 8) ;
			when "011" => readdata <= X"000000" &  TRAME(23 downto 16)  ;
			when "100" => readdata <= X"000000" &  TRAME(31 downto 24)   ;
			
			when others => readdata <= (others => '0');
			end case;
END PROCESS process_Read ;

--FIN  LECTURE SUR LE BUS AVALON  ---





end architecture rtl;
